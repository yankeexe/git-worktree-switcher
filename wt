#!/usr/bin/env bash
set -e

# Switch between git worktrees with speed.

args=("$@")
VERSION="0.1.1"
TMP_PATH=$(mktemp)
BINARY_PATH=$(realpath "$0")
JQ_URL="https://stedolan.github.io/jq/download"
RELEASE_URL="https://github.com/yankeexe/git-worktree-switcher/releases/latest"
RELEASE_API_URL="https://api.github.com/repos/yankeexe/git-worktree-switcher/releases/latest"
CHANGE_DIRECTORY_PREFIX="changedir:"


# Escape forward slash
arg=$(echo "${args[0]}" | sed 's/\//\\\//g')

# show worktree list
worktree_list() {
	git worktree list
}

help_message() {
	echo -e "wt lets you switch between your git worktrees with speed.\n"
	echo "Usage:"
	echo -e "\twt <worktree-name>: search for worktree names and change to that directory."
	echo -e "\twt list: list out all the git worktrees."
	echo -e "\twt update: update to the latest release of worktree switcher."
	echo -e "\twt version: show the CLI version."
	echo -e "\twt init <shell>: print the init script for <shell>."
	echo -e "\twt help: shows this help message."
}

goto_main_worktree() {
	main_worktree=$(git worktree list --porcelain | grep -E 'worktree ' | awk '{print $0; exit}' | cut -d ' ' -f2-)

	if [ -z "$main_worktree" ]; then
		:
	else
		directory=$main_worktree
	fi
}

download_latest_update() {
	download_url=$(curl -sL $RELEASE_API_URL | jq -r '.assets[0].browser_download_url')

	echo "Downloading latest version $fetched_tag_name"
	curl -sL -o "$TMP_PATH" "$download_url"

	echo "Updating to latest version..."
	chmod +x "$TMP_PATH"
	sudo mv "$TMP_PATH" "$BINARY_PATH"
	rm -f "$TMP_PATH"

	echo "You are using the latest version of worktree switcher: $fetched_tag_name"
}

check_release_version() {
	fetched_tag_name=$(curl -sL $RELEASE_API_URL | jq -r '.tag_name')

	if [ "$fetched_tag_name" == $VERSION ]; then
		echo "You have the latest version of worktree switcher!"
		echo "Version: $VERSION"
	else
		download_latest_update
	fi
}

update() {
	if [ -z "$(command -v jq)" ]; then
		echo "jq is required for updating worktree switcher via this command."
		echo -e "Install jq:\n$JQ_URL.\n"
		echo -e "Or visit:\n$RELEASE_URL"
	else
		check_release_version
	fi
}

get_dest_path="\$(echo \"\$result\" | awk '/^$CHANGE_DIRECTORY_PREFIX.*/ {sub(\"$CHANGE_DIRECTORY_PREFIX\", \"\"); print; exit}')"

init_bash() {
	cat <<EOF
wt() {
	result="\$($BINARY_PATH "\$@")"
	dest_path="$get_dest_path"

	if [[ -n "\$dest_path" ]]; then
		cd "\$dest_path" || return
	elif [[ -n \$result ]]; then
		echo "\$result"
	fi
}
EOF
}

init_fish() {
	cat <<EOF
function wt
	set -l result "\$($BINARY_PATH \$argv)"
	set -l dest_path "$get_dest_path"

	if test -n "\$dest_path"
		cd "\$dest_path"
	else if test -n "\$result"
		echo "\$result"
	end
end
EOF
}

init() {
	shell="${args[1]}"
	if [[ -z $shell ]]; then
		echo "Please supply a shell."
		echo "    eg. wt init bash"
		exit 1
	fi
	case "$shell" in
	bash|zsh)
		init_bash
		;;
	fish)
		init_fish
		;;
	*)
		echo "Unsupported shell: $shell"
		exit 1
		;;
	esac
}

if [ -z "${args[0]}" ]; then
	help_message
	exit 0
fi

case "${args[0]}" in
list)
	worktree_list
	;;
update)
	update
	;;
help)
	help_message
	;;
version)
	echo Version: $VERSION
	;;
init)
	init
	;;
-)
	goto_main_worktree
	;;
*)
	directory=$(git worktree list --porcelain | grep -E 'worktree ' | awk '/'"$arg"'/ {print; exit}' | cut -d ' ' -f2-)
	;;
esac

# If directory variable is not empty then change worktree
if [ -z "$directory" ]; then
	:
else
	echo "$CHANGE_DIRECTORY_PREFIX$directory"
fi
